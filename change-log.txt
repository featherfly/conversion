下一步实现
	1.实现数据库对应类型（java.sql包中的类）
	2.实现原子类型(线程池包中Atomic开头的类）
	
2017-04-12
	1.2.1发布
	1.加入java.sql.Date,java.sql.Time,java.sql.Timestamp实现
	2.异常输出使用properties文件支持国际化	
		
2015-04-24
	1.2.0发布
	1.重构程序
	2.加入parse
		
2014-06-17
	1.1.1发布
	1.移植到cn.featherfly	

2012-12-27
	1.1.0 发布
	1. 加入指派转换器功能，只有BeanPropertyConvertor有效，在属性上使用@Assign进行特定转换器指派
	2. 加入ConversionPolicys类，用于存放常见的转换策略

2012-3-24
1.0.0 发布
	1 实现基本类型的转换器（包含数组）
		convertor的 基本类型转换策略
	public static final ConversionPolicy BASIC_CONVERSION_POLICY
				= new ConversionPolicy(
					new BooleanConversion(), new BooleanWrapperConversion(), new BooleanArrayConversion()
					, new ByteConversion(), new ByteWrapperConversion(), new ByteArrayConversion()
					, new ShortConversion(), new ByteWrapperConversion(), new ByteArrayConversion()
					, new IntConversion(), new IntegerConversion(), new IntArrayConversion()
					, new LongConversion(), new LongWrapperConversion(), new LongArrayConversion()
					, new FloatConversion(), new FloatWrapperConversion(), new FloatArrayConversion()
					, new DoubleConversion(), new DoubleWrapperConversion(), new DoubleArrayConversion()
					, new StringConversion(), new StringArrayConversion()
					, new StringBufferConversion(), new StringBufferArrayConversion()
					, new StringBuilderConversion(), new StringBuilderArrayConversion()
					, new DateConversion(), new DateArrayConversion()
					, new ClassConversion(), new ClassArrayConversion()
					, new EnumConversion(), new EnumArrayConversion()
					, new BigDecimalConversion(), new BigDecimalArrayConversion()
					, new BigIntegerConversion(), new BigIntegerArrayConversion()
				);
	2 实现数字和日期带格式的转换
		DateFormatConversion Double.. Float... Integer... Long..., Short...
